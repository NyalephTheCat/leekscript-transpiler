// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

    const { lexer } = require("../lexer/lexer.js")

    const { ast, opt } = require("./parserTools.js")
var grammar = {
    Lexer: lexer,
    ParserRules: [
    {"name": "Script$ebnf$1", "symbols": ["ScriptBody"], "postprocess": id},
    {"name": "Script$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Script", "symbols": ["Script$ebnf$1", (lexer.has("EOF") ? {type: "EOF"} : EOF)], "postprocess": ast("Script")},
    {"name": "ScriptBody$ebnf$1", "symbols": ["GlobalStatement"]},
    {"name": "ScriptBody$ebnf$1", "symbols": ["ScriptBody$ebnf$1", "GlobalStatement"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ScriptBody", "symbols": ["ScriptBody$ebnf$1"], "postprocess": ast("ScriptBody")},
    {"name": "GlobalStatement", "symbols": ["GlobalDeclaration", "Sep"], "postprocess": ast("GlobalStatement")},
    {"name": "GlobalStatement", "symbols": ["ImportDeclaration", "Sep"], "postprocess": ast("GlobalStatement")},
    {"name": "GlobalStatement", "symbols": ["ClassDefinition", "Sep"], "postprocess": ast("GlobalStatement")},
    {"name": "GlobalStatement", "symbols": ["Statement"], "postprocess": ast("GlobalStatement")},
    {"name": "Statement$subexpression$1", "symbols": ["VarDeclaration"]},
    {"name": "Statement$subexpression$1", "symbols": ["IfStatement"]},
    {"name": "Statement$subexpression$1", "symbols": ["ForStatement"]},
    {"name": "Statement$subexpression$1", "symbols": ["WhileStatement"]},
    {"name": "Statement$subexpression$1", "symbols": ["DoWhileStatement"]},
    {"name": "Statement$subexpression$1", "symbols": ["FunctionDeclaration"]},
    {"name": "Statement$subexpression$1", "symbols": ["BreakStatement"]},
    {"name": "Statement$subexpression$1", "symbols": ["ContinueStatement"]},
    {"name": "Statement$subexpression$1", "symbols": ["ReturnStatement"]},
    {"name": "Statement$subexpression$1", "symbols": ["BlockStatement"]},
    {"name": "Statement$subexpression$1", "symbols": ["ExpressionStatement"]},
    {"name": "Statement", "symbols": ["Statement$subexpression$1", "Sep"], "postprocess": ast("Statement")},
    {"name": "GlobalDeclaration$ebnf$1", "symbols": ["Initializer"], "postprocess": id},
    {"name": "GlobalDeclaration$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "GlobalDeclaration", "symbols": [{"literal":"global"}, "BindingIdentifier", "GlobalDeclaration$ebnf$1"], "postprocess": ast("GlobalDeclaration")},
    {"name": "ImportDeclaration", "symbols": [{"literal":"import"}, {"literal":"("}, "StringLiteral", {"literal":")"}], "postprocess": ast("ImportDeclaration")},
    {"name": "ClassDefinition$ebnf$1", "symbols": ["ClassExtension"], "postprocess": id},
    {"name": "ClassDefinition$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ClassDefinition", "symbols": [{"literal":"class"}, "BindingIdentifier", "ClassDefinition$ebnf$1", {"literal":"{"}, "ClassBody", {"literal":"}"}], "postprocess": ast("ClassDefinition")},
    {"name": "ClassExtension", "symbols": [{"literal":"extends"}, "IdentifierName"], "postprocess": ast("ClassExtension")},
    {"name": "ClassBody$ebnf$1", "symbols": []},
    {"name": "ClassBody$ebnf$1$subexpression$1", "symbols": ["ConstructorDeclaration"]},
    {"name": "ClassBody$ebnf$1$subexpression$1", "symbols": ["MethodDeclaration"]},
    {"name": "ClassBody$ebnf$1$subexpression$1", "symbols": ["ClassPropertyDelcaration"]},
    {"name": "ClassBody$ebnf$1$subexpression$1", "symbols": [{"literal":";"}]},
    {"name": "ClassBody$ebnf$1", "symbols": ["ClassBody$ebnf$1", "ClassBody$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ClassBody", "symbols": ["ClassBody$ebnf$1"], "postprocess": ast("ClassBody")},
    {"name": "ConstructorDeclaration$ebnf$1", "symbols": ["Protection"], "postprocess": id},
    {"name": "ConstructorDeclaration$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ConstructorDeclaration", "symbols": ["ConstructorDeclaration$ebnf$1", {"literal":"constructor"}, "Arguments", "FunctionBody"], "postprocess": ast("ConstructorDeclaration")},
    {"name": "MethodDeclaration$ebnf$1", "symbols": ["Protection"], "postprocess": id},
    {"name": "MethodDeclaration$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "MethodDeclaration$ebnf$2", "symbols": [{"literal":"static"}], "postprocess": id},
    {"name": "MethodDeclaration$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "MethodDeclaration", "symbols": ["MethodDeclaration$ebnf$1", "MethodDeclaration$ebnf$2", "BindingIdentifier", "Arguments", "FunctionBody"], "postprocess": ast("MethodDeclaration")},
    {"name": "ClassPropertyDelcaration$ebnf$1", "symbols": ["Protection"], "postprocess": id},
    {"name": "ClassPropertyDelcaration$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ClassPropertyDelcaration$ebnf$2", "symbols": [{"literal":"static"}], "postprocess": id},
    {"name": "ClassPropertyDelcaration$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ClassPropertyDelcaration$ebnf$3", "symbols": ["Initializer"], "postprocess": id},
    {"name": "ClassPropertyDelcaration$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ClassPropertyDelcaration", "symbols": ["ClassPropertyDelcaration$ebnf$1", "ClassPropertyDelcaration$ebnf$2", "BindingIdentifier", "ClassPropertyDelcaration$ebnf$3"], "postprocess": ast("ClassPropertyDeclaration")},
    {"name": "Protection", "symbols": [{"literal":"public"}], "postprocess": id},
    {"name": "Protection", "symbols": [{"literal":"private"}], "postprocess": id},
    {"name": "Protection", "symbols": [{"literal":"protected"}], "postprocess": id},
    {"name": "VarDeclaration$ebnf$1", "symbols": ["Initializer"], "postprocess": id},
    {"name": "VarDeclaration$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "VarDeclaration", "symbols": [{"literal":"var"}, "BindingIdentifier", "VarDeclaration$ebnf$1"], "postprocess": ast("VarDeclaration")},
    {"name": "IfStatement$ebnf$1$subexpression$1", "symbols": [{"literal":"else"}, "Statement"]},
    {"name": "IfStatement$ebnf$1", "symbols": ["IfStatement$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IfStatement$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IfStatement", "symbols": [{"literal":"if"}, {"literal":"("}, "Expression", {"literal":")"}, "Statement", "IfStatement$ebnf$1"], "postprocess": ast("IfStatement")},
    {"name": "ForStatement$subexpression$1", "symbols": ["ForInHeader"]},
    {"name": "ForStatement$subexpression$1", "symbols": ["ForIterHeader"]},
    {"name": "ForStatement", "symbols": [{"literal":"for"}, {"literal":"("}, "ForStatement$subexpression$1", {"literal":")"}, "Statement"], "postprocess": ast("ForStatement")},
    {"name": "ForInHeader$ebnf$1$subexpression$1", "symbols": [{"literal":"var"}, "BindingIdentifier", {"literal":":"}]},
    {"name": "ForInHeader$ebnf$1", "symbols": ["ForInHeader$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "ForInHeader$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ForInHeader", "symbols": ["ForInHeader$ebnf$1", {"literal":"var"}, "BindingIdentifier", {"literal":"in"}, "Expression"], "postprocess": ast("ForInHeader")},
    {"name": "ForIterHeader$ebnf$1$subexpression$1$ebnf$1", "symbols": ["Initializer"], "postprocess": id},
    {"name": "ForIterHeader$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ForIterHeader$ebnf$1$subexpression$1", "symbols": [{"literal":"var"}, "BindingIdentifier", "ForIterHeader$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "ForIterHeader$ebnf$1$subexpression$1", "symbols": ["Expression"]},
    {"name": "ForIterHeader$ebnf$1", "symbols": ["ForIterHeader$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "ForIterHeader$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ForIterHeader$ebnf$2", "symbols": ["Expression"], "postprocess": id},
    {"name": "ForIterHeader$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ForIterHeader$ebnf$3", "symbols": ["Expression"], "postprocess": id},
    {"name": "ForIterHeader$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ForIterHeader", "symbols": ["ForIterHeader$ebnf$1", {"literal":";"}, "ForIterHeader$ebnf$2", {"literal":";"}, "ForIterHeader$ebnf$3"], "postprocess": ast("ForIterHeader")},
    {"name": "WhileStatement", "symbols": [{"literal":"while"}, {"literal":"("}, "Expression", {"literal":")"}, "Statement"], "postprocess": ast("WhileStatement")},
    {"name": "DoWhileStatement", "symbols": [{"literal":"do"}, "Statement", {"literal":"while"}, {"literal":"("}, "Expression", {"literal":")"}], "postprocess": ast("DoWhileStatement")},
    {"name": "FunctionDeclaration", "symbols": [{"literal":"function"}, "BindingIdentifier", "Arguments", "FunctionBody"], "postprocess": ast("FunctionDeclaration")},
    {"name": "FunctionBody$ebnf$1", "symbols": []},
    {"name": "FunctionBody$ebnf$1", "symbols": ["FunctionBody$ebnf$1", "Statement"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "FunctionBody", "symbols": [{"literal":"{"}, "FunctionBody$ebnf$1", {"literal":"}"}], "postprocess": ast("FunctionBody")},
    {"name": "BreakStatement", "symbols": [{"literal":"break"}], "postprocess": ast("BreakStatement")},
    {"name": "ContinueStatement", "symbols": [{"literal":"continue"}], "postprocess": ast("ContinueStatement")},
    {"name": "ReturnStatement$ebnf$1", "symbols": ["Expression"], "postprocess": id},
    {"name": "ReturnStatement$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ReturnStatement", "symbols": [{"literal":"return"}, "ReturnStatement$ebnf$1"], "postprocess": ast("ReturnStatement")},
    {"name": "BlockStatement$ebnf$1", "symbols": []},
    {"name": "BlockStatement$ebnf$1", "symbols": ["BlockStatement$ebnf$1", "Statement"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "BlockStatement", "symbols": [{"literal":"{"}, "BlockStatement$ebnf$1", {"literal":"}"}], "postprocess": ast("BlockStatement")},
    {"name": "EmptyStatement", "symbols": [{"literal":";"}], "postprocess": ast("EmptyStatement")},
    {"name": "ExpressionStatement", "symbols": ["Expression"], "postprocess": ast("ExpressionStatement")},
    {"name": "Expression", "symbols": ["AssignmentExpression"], "postprocess": id},
    {"name": "AssignmentExpression", "symbols": ["ConditionalExpression"], "postprocess": id},
    {"name": "AssignmentExpression", "symbols": ["ArrowFunction"], "postprocess": id},
    {"name": "AssignmentExpression", "symbols": ["LeftHandSideExpression", {"literal":"="}, "AssignmentExpression"], "postprocess": ast("AssignmentExpression")},
    {"name": "AssignmentExpression", "symbols": ["LeftHandSideExpression", (lexer.has("BinAssign") ? {type: "BinAssign"} : BinAssign), "AssignmentExpression"], "postprocess": ast("AssignmentExpression")},
    {"name": "ConditionalExpression", "symbols": ["ShortCircuitExpression"], "postprocess": id},
    {"name": "ConditionalExpression", "symbols": ["ShortCircuitExpression", {"literal":"?"}, "AssignmentExpression", {"literal":":"}, "AssignmentExpression"], "postprocess": ast("ConditionalExpression")},
    {"name": "ShortCircuitExpression", "symbols": ["LogicalORExpression"], "postprocess": id},
    {"name": "ShortCircuitExpression", "symbols": ["CoalesceExpression"], "postprocess": id},
    {"name": "CoalesceExpression", "symbols": ["BitwiseORExpression"], "postprocess": id},
    {"name": "CoalesceExpression", "symbols": ["BitwiseORExpression", {"literal":"??"}, "BitwiseORExpression"], "postprocess": ast("CoalseceExpression")},
    {"name": "LogicalORExpression", "symbols": ["LogicalANDExpression"], "postprocess": id},
    {"name": "LogicalORExpression", "symbols": ["LogicalORExpression", {"literal":"||"}, "LogicalANDExpression"], "postprocess": ast("LogicalOrExpression")},
    {"name": "LogicalANDExpression", "symbols": ["BitwiseORExpression"], "postprocess": id},
    {"name": "LogicalANDExpression", "symbols": ["LogicalANDExpression", {"literal":"&&"}, "BitwiseORExpression"], "postprocess": ast("LogicalANDExpression")},
    {"name": "BitwiseORExpression", "symbols": ["BitwiseXORExpression"], "postprocess": id},
    {"name": "BitwiseORExpression", "symbols": ["BitwiseORExpression", {"literal":"|"}, "BitwiseXORExpression"], "postprocess": ast("BitwiseORExpression")},
    {"name": "BitwiseXORExpression", "symbols": ["BitwiseANDExpression"], "postprocess": id},
    {"name": "BitwiseXORExpression", "symbols": ["BitwiseXORExpression", {"literal":"^"}, "BitwiseORExpression"], "postprocess": ast("BitwiseXORExpression")},
    {"name": "BitwiseANDExpression", "symbols": ["EqualityExpression"], "postprocess": id},
    {"name": "BitwiseANDExpression", "symbols": ["BitwiseANDExpression", {"literal":"&"}, "BitwiseANDExpression"], "postprocess": ast("BitwiseANDExpression")},
    {"name": "EqualityExpression", "symbols": ["RelationalExpression"], "postprocess": id},
    {"name": "EqualityExpression", "symbols": ["EqualityExpression", {"literal":"=="}, "RelationalExpression"], "postprocess": ast("EqualityExpression")},
    {"name": "EqualityExpression", "symbols": ["EqualityExpression", {"literal":"!="}, "RelationalExpression"], "postprocess": ast("EqualityExpression")},
    {"name": "EqualityExpression", "symbols": ["EqualityExpression", {"literal":"==="}, "RelationalExpression"], "postprocess": ast("EqualityExpression") /* TODO ADD ERROR HERE */},
    {"name": "EqualityExpression", "symbols": ["EqualityExpression", {"literal":"!=="}, "RelationalExpression"], "postprocess": ast("EqualityExpression") /* TODO ADD ERROR HERE */},
    {"name": "RelationalExpression", "symbols": ["ShiftExpression"], "postprocess": id},
    {"name": "RelationalExpression", "symbols": ["RelationalExpression", {"literal":"<"}, "ShiftExpression"], "postprocess": ast("RelationalExpression")},
    {"name": "RelationalExpression", "symbols": ["RelationalExpression", {"literal":">"}, "ShiftExpression"], "postprocess": ast("RelationalExpression")},
    {"name": "RelationalExpression", "symbols": ["RelationalExpression", {"literal":"<="}, "ShiftExpression"], "postprocess": ast("RelationalExpression")},
    {"name": "RelationalExpression", "symbols": ["RelationalExpression", {"literal":">="}, "ShiftExpression"], "postprocess": ast("RelationalExpression")},
    {"name": "RelationalExpression", "symbols": ["RelationalExpression", {"literal":"instanceof"}, "ShiftExpression"], "postprocess": ast("RelationalExpression")},
    {"name": "RelationalExpression", "symbols": ["RelationalExpression", {"literal":"in"}, "ShiftExpression"], "postprocess": ast("RelationalExpression")},
    {"name": "ShiftExpression", "symbols": ["AdditiveExpression"], "postprocess": id},
    {"name": "ShiftExpression", "symbols": ["ShiftExpression", {"literal":"<<"}, "AdditiveExpression"], "postprocess": ast("ShiftExpression")},
    {"name": "ShiftExpression", "symbols": ["ShiftExpression", {"literal":">>"}, "AdditiveExpression"], "postprocess": ast("ShiftExpression")},
    {"name": "ShiftExpression", "symbols": ["ShiftExpression", {"literal":">>>"}, "AdditiveExpression"], "postprocess": ast("ShiftExpression")},
    {"name": "AdditiveExpression", "symbols": ["MultiplicativeExpression"], "postprocess": id},
    {"name": "AdditiveExpression", "symbols": ["AdditiveExpression", {"literal":"+"}, "MultiplicativeExpression"], "postprocess": ast("AdditiveExpression")},
    {"name": "AdditiveExpression", "symbols": ["AdditiveExpression", {"literal":"-"}, "MultiplicativeExpression"], "postprocess": ast("AdditiveExpression")},
    {"name": "MultiplicativeExpression", "symbols": ["ExponentiationExpression"], "postprocess": id},
    {"name": "MultiplicativeExpression", "symbols": ["MultiplicativeExpression", {"literal":"*"}, "ExponentiationExpression"], "postprocess": ast("MultiplicativeExpression")},
    {"name": "MultiplicativeExpression", "symbols": ["MultiplicativeExpression", {"literal":"/"}, "ExponentiationExpression"], "postprocess": ast("MultiplicativeExpression")},
    {"name": "MultiplicativeExpression", "symbols": ["MultiplicativeExpression", {"literal":"\\"}, "ExponentiationExpression"], "postprocess": ast("MultiplicativeExpression")},
    {"name": "MultiplicativeExpression", "symbols": ["MultiplicativeExpression", {"literal":"%"}, "ExponentiationExpression"], "postprocess": ast("MultiplicativeExpression")},
    {"name": "ExponentiationExpression", "symbols": ["UnaryExpression"], "postprocess": id},
    {"name": "ExponentiationExpression", "symbols": ["UpdateExpression", {"literal":"**"}, "ExponentiationExpression"], "postprocess": ast("ExponentiationExpression")},
    {"name": "UnaryExpression", "symbols": ["UpdateExpression"], "postprocess": id},
    {"name": "UnaryExpression", "symbols": [{"literal":"typeof"}, "UnaryExpression"], "postprocess": ast("UnaryExpression")},
    {"name": "UnaryExpression", "symbols": [{"literal":"+"}, "UnaryExpression"], "postprocess": ast("UnaryExpression")},
    {"name": "UnaryExpression", "symbols": [{"literal":"-"}, "UnaryExpression"], "postprocess": ast("UnaryExpression")},
    {"name": "UnaryExpression", "symbols": [{"literal":"~"}, "UnaryExpression"], "postprocess": ast("UnaryExpression")},
    {"name": "UnaryExpression", "symbols": [{"literal":"!"}, "UnaryExpression"], "postprocess": ast("UnaryExpression")},
    {"name": "UpdateExpression", "symbols": ["LeftHandSideExpression"], "postprocess": id},
    {"name": "UpdateExpression", "symbols": ["LeftHandSideExpression", {"literal":"++"}], "postprocess": ast("UpdateExpression")},
    {"name": "UpdateExpression", "symbols": ["LeftHandSideExpression", {"literal":"--"}], "postprocess": ast("UpdateExpression")},
    {"name": "UpdateExpression", "symbols": [{"literal":"++"}, "UnaryExpression"], "postprocess": ast("UpdateExpression")},
    {"name": "UpdateExpression", "symbols": [{"literal":"--"}, "UnaryExpression"], "postprocess": ast("UpdateExpression")},
    {"name": "LeftHandSideExpression", "symbols": ["NewExpression"], "postprocess": id},
    {"name": "LeftHandSideExpression", "symbols": ["CallExpression"], "postprocess": id},
    {"name": "LeftHandSideExpression", "symbols": ["OptionalExpression"], "postprocess": id},
    {"name": "OptionalExpression", "symbols": ["MemberExpression", "OptionalChain"], "postprocess": ast("OptionalExpression")},
    {"name": "OptionalExpression", "symbols": ["CallExpression", "OptionalChain"], "postprocess": ast("OptionalExpression")},
    {"name": "OptionalExpression", "symbols": ["OptionalExpression", "OptionalChain"], "postprocess": ast("OptionalExpression")},
    {"name": "OptionalChain", "symbols": [{"literal":"?."}, "Arguments"], "postprocess": ast("OptionalChain")},
    {"name": "OptionalChain", "symbols": [{"literal":"?."}, {"literal":"["}, "Expression", {"literal":"]"}], "postprocess": ast("OptionalChain")},
    {"name": "OptionalChain", "symbols": [{"literal":"?."}, "IdentifierName"], "postprocess": ast("OptionalChain")},
    {"name": "OptionalChain", "symbols": ["OptionalChain", "Arguments"], "postprocess": ast("OptionalChain")},
    {"name": "OptionalChain", "symbols": ["OptionalChain", {"literal":"["}, "Expression", {"literal":"]"}], "postprocess": ast("OptionalChain")},
    {"name": "OptionalChain", "symbols": ["OptionalChain", {"literal":"."}, "IdentifierName"], "postprocess": ast("OptionalChain")},
    {"name": "Arguments$macrocall$2", "symbols": ["IdentifierReference"]},
    {"name": "Arguments$macrocall$3", "symbols": [{"literal":","}]},
    {"name": "Arguments$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "Arguments$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["Arguments$macrocall$3", "Arguments$macrocall$2"]},
    {"name": "Arguments$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["Arguments$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "Arguments$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Arguments$macrocall$1$ebnf$1$subexpression$1", "symbols": ["Arguments$macrocall$2", "Arguments$macrocall$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "Arguments$macrocall$1$ebnf$1", "symbols": ["Arguments$macrocall$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Arguments$macrocall$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Arguments$macrocall$1", "symbols": ["Arguments$macrocall$1$ebnf$1"], "postprocess": ast("Sequence")},
    {"name": "Arguments", "symbols": [{"literal":"("}, "Arguments$macrocall$1", {"literal":")"}], "postprocess": ast("Arguments")},
    {"name": "NewExpression", "symbols": ["MemberExpression"], "postprocess": id},
    {"name": "NewExpression", "symbols": [{"literal":"new"}, "NewExpression"], "postprocess": ast("NewExpression")},
    {"name": "CallExpression", "symbols": ["CallExpression"], "postprocess": ast("CallExpression")},
    {"name": "CallExpression", "symbols": ["CallExpression", {"literal":"["}, "Expression", {"literal":"]"}], "postprocess": ast("CallExpression")},
    {"name": "CallExpression", "symbols": ["CallExpression", {"literal":"."}, "IdentifierName"], "postprocess": ast("CallExpression")},
    {"name": "MemberExpression", "symbols": ["PrimaryExpression"], "postprocess": id},
    {"name": "MemberExpression", "symbols": ["SuperProperty"], "postprocess": id},
    {"name": "MemberExpression", "symbols": ["MemberExpression", {"literal":"["}, "Expression", {"literal":"]"}], "postprocess": ast("MemberExpression")},
    {"name": "MemberExpression", "symbols": ["MemberExpression", {"literal":"."}, "IdentifierName"], "postprocess": ast("MemberExpression")},
    {"name": "MemberExpression", "symbols": [{"literal":"new"}, "MemberExpression", "Arguments"], "postprocess": ast("MemberExpression")},
    {"name": "SuperProperty", "symbols": [{"literal":"super"}, {"literal":"["}, "Expression", {"literal":"]"}], "postprocess": ast("SuperProperty")},
    {"name": "SuperProperty", "symbols": [{"literal":"super"}, {"literal":"."}, "IdentifierName"], "postprocess": ast("SuperProperty")},
    {"name": "CoverCallExpressionAndArrowHead$macrocall$2", "symbols": ["Expression"]},
    {"name": "CoverCallExpressionAndArrowHead$macrocall$3", "symbols": [{"literal":","}]},
    {"name": "CoverCallExpressionAndArrowHead$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "CoverCallExpressionAndArrowHead$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["CoverCallExpressionAndArrowHead$macrocall$3", "CoverCallExpressionAndArrowHead$macrocall$2"]},
    {"name": "CoverCallExpressionAndArrowHead$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["CoverCallExpressionAndArrowHead$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "CoverCallExpressionAndArrowHead$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "CoverCallExpressionAndArrowHead$macrocall$1$ebnf$1$subexpression$1", "symbols": ["CoverCallExpressionAndArrowHead$macrocall$2", "CoverCallExpressionAndArrowHead$macrocall$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "CoverCallExpressionAndArrowHead$macrocall$1$ebnf$1", "symbols": ["CoverCallExpressionAndArrowHead$macrocall$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "CoverCallExpressionAndArrowHead$macrocall$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "CoverCallExpressionAndArrowHead$macrocall$1", "symbols": ["CoverCallExpressionAndArrowHead$macrocall$1$ebnf$1"], "postprocess": ast("Sequence")},
    {"name": "CoverCallExpressionAndArrowHead", "symbols": [{"literal":"("}, "CoverCallExpressionAndArrowHead$macrocall$1", {"literal":")"}], "postprocess": ast("CoverCallExpressionAndArrowHead")},
    {"name": "Initializer", "symbols": [{"literal":"="}, "AssignmentExpression"], "postprocess": ast("Initializer")},
    {"name": "ArrowFunction", "symbols": ["ArrowParameters", {"literal":"=>"}, "ConciseBody"], "postprocess": ast("ArrowFunction")},
    {"name": "ArrowParameters", "symbols": ["BindingIdentifier"], "postprocess": id},
    {"name": "ArrowParameters", "symbols": ["CoverCallExpressionAndArrowHead"], "postprocess": id},
    {"name": "ConciseBody", "symbols": [{"literal":"{"}, "FunctionBody", {"literal":"}"}], "postprocess": ast("ConciseBody")},
    {"name": "ConciseBody", "symbols": ["AssignmentExpression"], "postprocess": id /* TODO clean */},
    {"name": "FunctionExpression", "symbols": [{"literal":"function"}, "Arguments", {"literal":"{"}, "FunctionBody", {"literal":"}"}], "postprocess": ast("FunctionExpression")},
    {"name": "PrimaryExpression", "symbols": [{"literal":"this"}], "postprocess": id},
    {"name": "PrimaryExpression", "symbols": ["IdentifierReference"], "postprocess": id},
    {"name": "PrimaryExpression", "symbols": ["Literal"], "postprocess": id},
    {"name": "PrimaryExpression", "symbols": ["ObjectLiteral"], "postprocess": id},
    {"name": "PrimaryExpression", "symbols": ["ArrayLiteral"], "postprocess": id},
    {"name": "PrimaryExpression", "symbols": ["MapLiteral"], "postprocess": id},
    {"name": "PrimaryExpression", "symbols": ["FunctionExpression"], "postprocess": id},
    {"name": "PrimaryExpression", "symbols": ["ParenthesizedExpression"], "postprocess": id},
    {"name": "ParenthesizedExpression", "symbols": [{"literal":"("}, "Expression", {"literal":")"}], "postprocess": ast("ParenthesizedExpression")},
    {"name": "Literal", "symbols": ["NullLiteral"], "postprocess": id},
    {"name": "Literal", "symbols": ["BooleanLiteral"], "postprocess": id},
    {"name": "Literal", "symbols": ["NumericLiteral"], "postprocess": id},
    {"name": "Literal", "symbols": ["StringLiteral"]},
    {"name": "NullLiteral", "symbols": [{"literal":"null"}], "postprocess": id},
    {"name": "BooleanLiteral", "symbols": [{"literal":"true"}], "postprocess": id},
    {"name": "BooleanLiteral", "symbols": [{"literal":"false"}], "postprocess": id},
    {"name": "NumericLiteral", "symbols": [(lexer.has("Integer") ? {type: "Integer"} : Integer)], "postprocess": id},
    {"name": "NumericLiteral", "symbols": [(lexer.has("Decimal") ? {type: "Decimal"} : Decimal)], "postprocess": id},
    {"name": "NumericLiteral", "symbols": [(lexer.has("Hexadecimal") ? {type: "Hexadecimal"} : Hexadecimal)], "postprocess": id},
    {"name": "NumericLiteral", "symbols": [(lexer.has("Binary") ? {type: "Binary"} : Binary)], "postprocess": id},
    {"name": "StringLiteral", "symbols": [(lexer.has("String") ? {type: "String"} : String)], "postprocess": id},
    {"name": "ArrayLiteral$macrocall$2", "symbols": ["AssignmentExpression"]},
    {"name": "ArrayLiteral$macrocall$3", "symbols": [{"literal":","}]},
    {"name": "ArrayLiteral$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "ArrayLiteral$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["ArrayLiteral$macrocall$3", "ArrayLiteral$macrocall$2"]},
    {"name": "ArrayLiteral$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["ArrayLiteral$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "ArrayLiteral$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ArrayLiteral$macrocall$1$ebnf$1$subexpression$1", "symbols": ["ArrayLiteral$macrocall$2", "ArrayLiteral$macrocall$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "ArrayLiteral$macrocall$1$ebnf$1", "symbols": ["ArrayLiteral$macrocall$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "ArrayLiteral$macrocall$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ArrayLiteral$macrocall$1", "symbols": ["ArrayLiteral$macrocall$1$ebnf$1"], "postprocess": ast("Sequence")},
    {"name": "ArrayLiteral", "symbols": [{"literal":"["}, "ArrayLiteral$macrocall$1", {"literal":"]"}], "postprocess": ast("ArrayLiteral")},
    {"name": "MapLiteral", "symbols": [{"literal":"["}, {"literal":":"}, {"literal":"]"}], "postprocess": ast("MapLiteral")},
    {"name": "MapLiteral$macrocall$2", "symbols": ["PropertyDefinition"]},
    {"name": "MapLiteral$macrocall$3", "symbols": [{"literal":","}]},
    {"name": "MapLiteral$macrocall$1$ebnf$1", "symbols": []},
    {"name": "MapLiteral$macrocall$1$ebnf$1$subexpression$1", "symbols": ["MapLiteral$macrocall$3", "MapLiteral$macrocall$2"]},
    {"name": "MapLiteral$macrocall$1$ebnf$1", "symbols": ["MapLiteral$macrocall$1$ebnf$1", "MapLiteral$macrocall$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "MapLiteral$macrocall$1", "symbols": ["MapLiteral$macrocall$2", "MapLiteral$macrocall$1$ebnf$1"], "postprocess": ast("Sequence")},
    {"name": "MapLiteral", "symbols": [{"literal":"["}, "MapLiteral$macrocall$1", {"literal":"]"}], "postprocess": ast("MapLiteral")},
    {"name": "ObjectLiteral$macrocall$2", "symbols": ["PropertyDefinition"]},
    {"name": "ObjectLiteral$macrocall$3", "symbols": [{"literal":","}]},
    {"name": "ObjectLiteral$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "ObjectLiteral$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["ObjectLiteral$macrocall$3", "ObjectLiteral$macrocall$2"]},
    {"name": "ObjectLiteral$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["ObjectLiteral$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "ObjectLiteral$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ObjectLiteral$macrocall$1$ebnf$1$subexpression$1", "symbols": ["ObjectLiteral$macrocall$2", "ObjectLiteral$macrocall$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "ObjectLiteral$macrocall$1$ebnf$1", "symbols": ["ObjectLiteral$macrocall$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "ObjectLiteral$macrocall$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ObjectLiteral$macrocall$1", "symbols": ["ObjectLiteral$macrocall$1$ebnf$1"], "postprocess": ast("Sequence")},
    {"name": "ObjectLiteral", "symbols": [{"literal":"{"}, "ObjectLiteral$macrocall$1", {"literal":"}"}], "postprocess": ast("ObjectLiteral")},
    {"name": "PropertyDefinition", "symbols": ["PropertyName", {"literal":":"}, "AssignmentExpression"], "postprocess": ast("PropertyDefinition")},
    {"name": "BindingIdentifier", "symbols": [(lexer.has("ID") ? {type: "ID"} : ID)], "postprocess": id},
    {"name": "IdentifierName", "symbols": [(lexer.has("ID") ? {type: "ID"} : ID)], "postprocess": id},
    {"name": "IdentifierReference", "symbols": [(lexer.has("ID") ? {type: "ID"} : ID)], "postprocess": id},
    {"name": "PropertyName", "symbols": [(lexer.has("ID") ? {type: "ID"} : ID)], "postprocess": id},
    {"name": "Sep$ebnf$1", "symbols": [{"literal":";"}], "postprocess": id},
    {"name": "Sep$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Sep", "symbols": ["Sep$ebnf$1"], "postprocess": ast("Sep")}
]
  , ParserStart: "Script"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
